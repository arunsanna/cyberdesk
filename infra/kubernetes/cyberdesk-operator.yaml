apiVersion: v1
kind: Namespace
metadata:
  name: cyberdesk-system
  labels:
    app.kubernetes.io/name: cyberdesk-system
    app.kubernetes.io/part-of: cyberdesk
    app.kubernetes.io/component: operator
  annotations:
    description: "Dedicated namespace for the Cyberdesk Operator and related resources" 
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cyberdesk-operator
  namespace: cyberdesk-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cyberdesk-operator
rules:
# Kopf framework requires these permissions
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch", "update"]
- apiGroups: ["", "coordination.k8s.io"]
  resources: ["configmaps", "leases"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

# Access to the trigger CRD
- apiGroups: ["cyberdesk.io"]
  resources: ["startcyberdeskoperators"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

# Access to Cyberdesk CRDs
- apiGroups: ["cyberdesk.io"]
  resources: ["cyberdesks", "cyberdesks/status"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

# Access to KubeVirt resources
- apiGroups: ["kubevirt.io"]
  resources: ["virtualmachines", "virtualmachineinstances"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

# NEW: Access to KubeVirt Snapshot resources
- apiGroups: ["snapshot.kubevirt.io"]
  resources: ["virtualmachinesnapshots"]
  verbs: ["get", "list", "watch"]

# NEW: Access to KubeVirt Clone resources
- apiGroups: ["clone.kubevirt.io"]
  resources: ["virtualmachineclones"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

# Permission to manage CRDs
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cyberdesk-operator
subjects:
- kind: ServiceAccount
  name: cyberdesk-operator
  namespace: cyberdesk-system
roleRef:
  kind: ClusterRole
  name: cyberdesk-operator
  apiGroup: rbac.authorization.k8s.io 
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cyberdesk-operator
  namespace: cyberdesk-system
  labels:
    app: cyberdesk-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cyberdesk-operator
  template:
    metadata:
      labels:
        app: cyberdesk-operator
    spec:
      serviceAccountName: cyberdesk-operator
      containers:
      - name: operator
        image: cyberdesk/cyberdesk-operator:v0.2.1
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: health
        livenessProbe:
          httpGet:
            path: /healthz
            port: health
          initialDelaySeconds: 15
          periodSeconds: 30
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "200m"
            memory: "256Mi"
        envFrom:
        - secretRef:
            name: supabase-credentials
---
# CRD for the trigger resource
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: startcyberdeskoperators.cyberdesk.io
spec:
  group: cyberdesk.io
  names:
    kind: StartCyberdeskOperator
    plural: startcyberdeskoperators
    singular: startcyberdeskoperator
    shortNames:
      - sco
  scope: Namespaced # Keeping it namespaced as requested for minimal scope
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              description: "Specification for triggering the Cyberdesk operator setup. Currently holds no fields."
              # No specific fields needed for now, just the presence triggers the action
