// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetV1DesktopIdData, GetV1DesktopIdResponse, GetV1DesktopIdError, PostV1DesktopData, PostV1DesktopResponse, PostV1DesktopError, PostV1DesktopIdStopData, PostV1DesktopIdStopResponse, PostV1DesktopIdStopError, PostV1DesktopIdComputerActionData, PostV1DesktopIdComputerActionResponse, PostV1DesktopIdComputerActionError, PostV1DesktopIdBashActionData, PostV1DesktopIdBashActionResponse, PostV1DesktopIdBashActionError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get details of a specific desktop instance
 * Returns the ID, status, creation timestamp, and timeout timestamp for a given desktop instance.
 */
export const getV1DesktopId = <ThrowOnError extends boolean = false>(options: Options<GetV1DesktopIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV1DesktopIdResponse, GetV1DesktopIdError, ThrowOnError>({
        url: '/v1/desktop/{id}',
        ...options
    });
};

/**
 * Create a new virtual desktop instance
 * Creates a new virtual desktop instance and returns its ID and stream URL
 */
export const postV1Desktop = <ThrowOnError extends boolean = false>(options: Options<PostV1DesktopData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1DesktopResponse, PostV1DesktopError, ThrowOnError>({
        url: '/v1/desktop',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Stop a running desktop instance
 * Stops a running desktop instance and cleans up resources
 */
export const postV1DesktopIdStop = <ThrowOnError extends boolean = false>(options: Options<PostV1DesktopIdStopData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1DesktopIdStopResponse, PostV1DesktopIdStopError, ThrowOnError>({
        url: '/v1/desktop/{id}/stop',
        ...options
    });
};

/**
 * Perform an action on the desktop
 * Executes a computer action such as mouse clicks, keyboard input, or screenshots on the desktop
 */
export const postV1DesktopIdComputerAction = <ThrowOnError extends boolean = false>(options: Options<PostV1DesktopIdComputerActionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1DesktopIdComputerActionResponse, PostV1DesktopIdComputerActionError, ThrowOnError>({
        url: '/v1/desktop/{id}/computer-action',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Execute a bash command on the desktop
 * Runs a bash command on the desktop and returns the command output
 */
export const postV1DesktopIdBashAction = <ThrowOnError extends boolean = false>(options: Options<PostV1DesktopIdBashActionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1DesktopIdBashActionResponse, PostV1DesktopIdBashActionError, ThrowOnError>({
        url: '/v1/desktop/{id}/bash-action',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};