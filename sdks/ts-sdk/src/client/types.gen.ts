// This file is auto-generated by @hey-api/openapi-ts

export type GetV1DesktopByIdData = {
    body?: never;
    headers: {
        /**
         * API key for authentication
         */
        'x-api-key': string;
    };
    path: {
        /**
         * The UUID of the desktop instance to retrieve
         */
        id: string;
    };
    query?: never;
    url: '/v1/desktop/{id}';
};

export type GetV1DesktopByIdErrors = {
    /**
     * The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
     */
    400: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
     */
    401: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.
     */
    403: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web.
     */
    404: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * This response is sent when a request conflicts with the current state of the server.
     */
    409: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * The user has sent too many requests in a given amount of time ("rate limiting")
     */
    429: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * The server has encountered a situation it does not know how to handle.
     */
    500: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * The server, while acting as a gateway or proxy, received an invalid response from the upstream server.
     */
    502: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
};

export type GetV1DesktopByIdError = GetV1DesktopByIdErrors[keyof GetV1DesktopByIdErrors];

export type GetV1DesktopByIdResponses = {
    /**
     * Desktop instance details retrieved successfully
     */
    200: {
        /**
         * Unique identifier for the desktop instance
         */
        id: string;
        /**
         * Current status of the desktop instance
         */
        status: 'pending' | 'running' | 'terminated' | 'error';
        /**
         * URL for the desktop stream (null if the desktop is not running)
         */
        stream_url: string;
        /**
         * Timestamp when the instance was created
         */
        created_at: string;
        /**
         * Timestamp when the instance will automatically time out
         */
        timeout_at: string;
    };
};

export type GetV1DesktopByIdResponse = GetV1DesktopByIdResponses[keyof GetV1DesktopByIdResponses];

export type PostV1DesktopData = {
    body?: {
        /**
         * Timeout in milliseconds for the desktop session
         */
        timeout_ms?: number;
    };
    headers: {
        /**
         * API key for authentication
         */
        'x-api-key': string;
    };
    path?: never;
    query?: never;
    url: '/v1/desktop';
};

export type PostV1DesktopErrors = {
    /**
     * The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
     */
    400: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
     */
    401: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.
     */
    403: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web.
     */
    404: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * This response is sent when a request conflicts with the current state of the server.
     */
    409: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * The user has sent too many requests in a given amount of time ("rate limiting")
     */
    429: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * The server has encountered a situation it does not know how to handle.
     */
    500: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * The server, while acting as a gateway or proxy, received an invalid response from the upstream server.
     */
    502: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
};

export type PostV1DesktopError = PostV1DesktopErrors[keyof PostV1DesktopErrors];

export type PostV1DesktopResponses = {
    /**
     * Desktop creation initiated successfully
     */
    200: {
        /**
         * Unique identifier for the desktop instance
         */
        id: string;
        /**
         * Initial status of the desktop instance after creation request
         */
        status: 'pending' | 'running' | 'terminated' | 'error';
    };
};

export type PostV1DesktopResponse = PostV1DesktopResponses[keyof PostV1DesktopResponses];

export type PostV1DesktopByIdStopData = {
    body?: never;
    headers: {
        /**
         * API key for authentication
         */
        'x-api-key': string;
    };
    path: {
        /**
         * Desktop instance ID to stop
         */
        id: string;
    };
    query?: never;
    url: '/v1/desktop/{id}/stop';
};

export type PostV1DesktopByIdStopErrors = {
    /**
     * The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
     */
    400: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
     */
    401: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.
     */
    403: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web.
     */
    404: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * This response is sent when a request conflicts with the current state of the server.
     */
    409: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * The user has sent too many requests in a given amount of time ("rate limiting")
     */
    429: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * The server has encountered a situation it does not know how to handle.
     */
    500: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * The server, while acting as a gateway or proxy, received an invalid response from the upstream server.
     */
    502: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
};

export type PostV1DesktopByIdStopError = PostV1DesktopByIdStopErrors[keyof PostV1DesktopByIdStopErrors];

export type PostV1DesktopByIdStopResponses = {
    /**
     * Desktop stopped successfully
     */
    200: {
        /**
         * Status of the desktop instance after stopping
         */
        status: 'pending' | 'running' | 'terminated' | 'error';
    };
};

export type PostV1DesktopByIdStopResponse = PostV1DesktopByIdStopResponses[keyof PostV1DesktopByIdStopResponses];

export type PostV1DesktopByIdComputerActionData = {
    body?: {
        /**
         * Perform a mouse action: click, press (down), or release (up). Defaults to a single left click at the current position.
         */
        type: 'click_mouse';
        /**
         * X coordinate for the action (optional, uses current position if omitted)
         */
        x?: number;
        /**
         * Y coordinate for the action (optional, uses current position if omitted)
         */
        y?: number;
        /**
         * Mouse button to use (optional, defaults to 'left')
         */
        button?: 'left' | 'right' | 'middle';
        /**
         * Number of clicks to perform (optional, defaults to 1, only applicable for 'click' type)
         */
        num_of_clicks?: number;
        /**
         * Type of mouse action (optional, defaults to 'click')
         */
        click_type?: 'click' | 'down' | 'up';
    } | {
        /**
         * Scroll the mouse wheel in the specified direction
         */
        type: 'scroll';
        /**
         * Direction to scroll
         */
        direction: 'up' | 'down' | 'left' | 'right';
        /**
         * Amount to scroll in pixels
         */
        amount: number;
    } | {
        /**
         * Move the mouse cursor to the specified coordinates
         */
        type: 'move_mouse';
        /**
         * X coordinate to move to
         */
        x: number;
        /**
         * Y coordinate to move to
         */
        y: number;
    } | {
        /**
         * Drag the mouse from start to end coordinates
         */
        type: 'drag_mouse';
        /**
         * Starting coordinates for the drag operation
         */
        start: {
            /**
             * X coordinate on the screen
             */
            x: number;
            /**
             * Y coordinate on the screen
             */
            y: number;
        };
        /**
         * Ending coordinates for the drag operation
         */
        end: {
            /**
             * X coordinate on the screen
             */
            x: number;
            /**
             * Y coordinate on the screen
             */
            y: number;
        };
    } | {
        /**
         * Type text at the current cursor position
         */
        type: 'type';
        /**
         * Text to type
         */
        text: string;
    } | {
        /**
         * Press, hold down, or release one or more keyboard keys. Defaults to a single press and release.
         */
        type: 'press_keys';
        keys: string | Array<string>;
        /**
         * Type of key action (optional, defaults to 'press' which is a down and up action)
         */
        key_action_type?: 'press' | 'down' | 'up';
    } | {
        /**
         * Wait for the specified number of milliseconds
         */
        type: 'wait';
        /**
         * Time to wait in milliseconds
         */
        ms: number;
    } | {
        /**
         * Take a screenshot of the desktop
         */
        type: 'screenshot';
    } | {
        /**
         * Get the current mouse cursor position
         */
        type: 'get_cursor_position';
    };
    headers: {
        /**
         * API key for authentication
         */
        'x-api-key': string;
    };
    path: {
        /**
         * Desktop instance ID to perform the action on
         */
        id: string;
    };
    query?: never;
    url: '/v1/desktop/{id}/computer-action';
};

export type PostV1DesktopByIdComputerActionErrors = {
    /**
     * The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
     */
    400: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
     */
    401: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.
     */
    403: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web.
     */
    404: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * This response is sent when a request conflicts with the current state of the server.
     */
    409: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * The user has sent too many requests in a given amount of time ("rate limiting")
     */
    429: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * The server has encountered a situation it does not know how to handle.
     */
    500: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * The server, while acting as a gateway or proxy, received an invalid response from the upstream server.
     */
    502: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
};

export type PostV1DesktopByIdComputerActionError = PostV1DesktopByIdComputerActionErrors[keyof PostV1DesktopByIdComputerActionErrors];

export type PostV1DesktopByIdComputerActionResponses = {
    /**
     * Action executed successfully. Response may contain output or image data depending on the action.
     */
    200: {
        /**
         * Raw string output from the executed command (if any)
         */
        output?: string;
        /**
         * Error message if the operation failed (also indicated by non-2xx HTTP status)
         */
        error?: string;
        /**
         * Base64 encoded JPEG image data (only returned for screenshot actions)
         */
        base64_image?: string;
    };
};

export type PostV1DesktopByIdComputerActionResponse = PostV1DesktopByIdComputerActionResponses[keyof PostV1DesktopByIdComputerActionResponses];

export type PostV1DesktopByIdBashActionData = {
    body?: {
        /**
         * Bash command to execute
         */
        command: string;
    };
    headers: {
        /**
         * API key for authentication
         */
        'x-api-key': string;
    };
    path: {
        /**
         * Desktop instance ID to run the command on
         */
        id: string;
    };
    query?: never;
    url: '/v1/desktop/{id}/bash-action';
};

export type PostV1DesktopByIdBashActionErrors = {
    /**
     * The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
     */
    400: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
     */
    401: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.
     */
    403: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web.
     */
    404: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * This response is sent when a request conflicts with the current state of the server.
     */
    409: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * The user has sent too many requests in a given amount of time ("rate limiting")
     */
    429: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * The server has encountered a situation it does not know how to handle.
     */
    500: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
    /**
     * The server, while acting as a gateway or proxy, received an invalid response from the upstream server.
     */
    502: {
        status: 'error';
        /**
         * Error message detailing what went wrong
         */
        error: string;
    };
};

export type PostV1DesktopByIdBashActionError = PostV1DesktopByIdBashActionErrors[keyof PostV1DesktopByIdBashActionErrors];

export type PostV1DesktopByIdBashActionResponses = {
    /**
     * Command executed successfully. Response contains command output.
     */
    200: {
        /**
         * Raw string output from the executed command (if any)
         */
        output?: string;
        /**
         * Error message if the operation failed (also indicated by non-2xx HTTP status)
         */
        error?: string;
        /**
         * Base64 encoded JPEG image data (only returned for screenshot actions)
         */
        base64_image?: string;
    };
};

export type PostV1DesktopByIdBashActionResponse = PostV1DesktopByIdBashActionResponses[keyof PostV1DesktopByIdBashActionResponses];

export type ClientOptions = {
    baseUrl: 'https://api.cyberdesk.io' | (string & {});
};